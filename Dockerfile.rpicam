FROM debian:12

#### Build OpenCV (This is not the final configuration)
WORKDIR /opencv

RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt,sharing=locked \
    apt update && apt upgrade -y && \
    apt install -y cmake g++ wget unzip libgtk2.0-dev pkg-config
ADD https://github.com/opencv/opencv/archive/4.x.zip opencv.zip
RUN unzip opencv.zip
ADD https://github.com/opencv/opencv_contrib/archive/4.x.zip opencv_contrib.zip
RUN unzip opencv_contrib.zip
RUN mkdir -p build && cd build && \
    cmake -DBUILD_EXAMPLES=ON -DOPENCV_EXTRA_MODULES_PATH=../opencv_contrib-4.x/modules ../opencv-4.x && \
    cmake --build . -j`nproc`


##########################
##  Build libcamera
##########################

# Add raspberry pi sources for libcamera
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt,sharing=locked \
    apt update && apt install -y curl gpg && \
    curl -fsSL http://archive.raspberrypi.com/debian/raspberrypi.gpg.key | gpg --dearmor -o /usr/share/keyrings/raspberrypi.gpg && \
    echo "deb [arch=arm64 signed-by=/usr/share/keyrings/raspberrypi.gpg] http://archive.raspberrypi.com/debian/ bookworm main" > /etc/apt/sources.list.d/raspi.list

# https://www.raspberrypi.com/documentation/computers/camera_software.html#build-libcamera-and-rpicam-apps

RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt,sharing=locked \
    apt update && apt upgrade -y && apt install -y libcamera-dev libjpeg-dev libtiff5-dev libpng-dev libavdevice-dev \
    libboost-program-options-dev libdrm-dev libexif-dev meson ninja-build wget ffmpeg git

# Clone rpicam-apps
ADD --keep-git-dir https://github.com/raspberrypi/rpicam-apps.git /rpicam-apps
WORKDIR /rpicam-apps

# Build and install rpicam-apps
RUN meson setup build -Denable_libav=enabled -Denable_drm=enabled -Denable_egl=disabled -Denable_qt=disabled -Denable_opencv=disabled -Denable_tflite=disabled -Denable_hailo=disabled
RUN meson compile -C build && meson install -C build
RUN ldconfig

# Install go2rtc
ADD --chmod=755 https://github.com/AlexxIT/go2rtc/releases/latest/download/go2rtc_linux_arm64 /usr/local/bin/go2rtc

# Set up entrypoint
COPY stream.sh /stream.sh
ENTRYPOINT ["/stream.sh"]


# TODO Reduce image size! statically compile https://github.com/ros2/ament_cmake_ros/blob/3f421a0bafa8de0caae1ae2baefc5b982bf4f81a/ament_cmake_ros/cmake/build_shared_libs.cmake#L15-L20 and only copy binaries to final image
